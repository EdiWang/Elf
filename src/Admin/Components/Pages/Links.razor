@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular

@attribute [Authorize]

<style>
    .text-muted {
        color: #aaa;
    }
</style>

<PageTitle>Links</PageTitle>

<FluentToolbar id="toolbar-links" Style="width:100%;margin-bottom:15px;">
    <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size20.New())" Loading="IsBusy"
        OnClick="New">New</FluentButton>
    <FluentButton IconStart="@(new Size20.ArrowSync())" Loading="IsBusy" OnClick="Refresh">Refresh
    </FluentButton>

    <FluentSpacer />

    <FluentAutocomplete TOption="Tag" Placeholder="Filter by tags" OnOptionsSearch="@OnSearchTagAsync"
        Disabled="!string.IsNullOrWhiteSpace(SearchTerm)" OptionText="@(i => i.Name)"
        @bind-SelectedOptions="@SelectedTags" Width="300px" Style="display: inline-flex;" />

    <FluentButton IconStart="@(new Size20.Filter())" Loading="IsBusy" OnClick="() => FilterByTag(true)">
        Filter
    </FluentButton>

    <FluentSpacer Width="10" />

    <FluentSearch @bind-Value=SearchTerm Placeholder="Token or Note" Disabled="IsBusy || SelectedTags.Any()"
        AfterBindValue="HandleSearchInput"></FluentSearch>
</FluentToolbar>

<FluentCard>
    <FluentDataGrid
        Items="@LinkItems"
        GenerateHeader="GenerateHeaderOption.Sticky"
        Virtualize="true"
        ItemSize="46"
        GridTemplateColumns="0.2fr 0.8fr 0.4fr 0.2fr 0.2fr 0.15fr 0.1fr 0.3fr 0.1fr 0.3fr">

        <TemplateColumn Title="Token">
            <a href="@Constants.APIAddress/fw/@context.FwToken" target="_blank">@context.FwToken</a>
        </TemplateColumn>

        <TemplateColumn Title="Origin Url">
            <a href="@context.OriginUrl" target="_blank">@context.OriginUrl</a>
        </TemplateColumn>

        <PropertyColumn Property="@(c => c.Note)" Sortable="true" Class="note"/>

        <TemplateColumn Title="Aka">
            @if (!string.IsNullOrWhiteSpace(context.AkaName))
            {
                <a href="@Constants.APIAddress/aka/@context.AkaName" target="_blank">@context.AkaName</a>
            }
            else
            {
                <span class="text-muted">(none)</span>
            }
        </TemplateColumn>

        <TemplateColumn Title="Tags">
            @foreach (var tag in context.Tags)
            {
                <FluentBadge Appearance="Appearance.Accent">
                    <span data-tag-id="@tag.Id">@tag.Name</span>
                </FluentBadge>
                <FluentSpacer Width="5"/>
            }
        </TemplateColumn>
        <TemplateColumn Title="Enabled">
            <FluentCheckbox Value="context.IsEnabled" ValueChanged="@((e) => SetEnableValue(context, e))">
            </FluentCheckbox>
        </TemplateColumn>
        <PropertyColumn Property="@(c => c.TTL)" Sortable="true" Class="ttl"/>
        <PropertyColumn Property="@(c => c.UpdateTimeUtc)" Title="Update Time (UTC)" Sortable="true"
                        Class="update-time-utc"/>
        <PropertyColumn Property="@(c => c.Hits)" Sortable="true" Class="hits"/>

        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton IconEnd="@(new Size20.Copy())" OnClick="() => Copy(context.FwToken)"/>
            <FluentButton IconEnd="@(new Size20.Share())" OnClick="() => Share(context)"/>
            <FluentButton IconEnd="@(new Size20.Edit())" OnClick="() => Edit(context)"/>
            <FluentButton IconEnd="@(new Size20.Delete())" OnClick="() => Delete(context)"/>
        </TemplateColumn>
    </FluentDataGrid>

    <FluentPaginator State="@Pagination" CurrentPageIndexChanged="CurrentPageIndexChanged" />
</FluentCard>