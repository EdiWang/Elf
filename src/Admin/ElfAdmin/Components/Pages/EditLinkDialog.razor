@implements IDialogContentComponent<LinkEditModel>
@inject HttpClient Http
@inject IMessageService MessageService

<style>
    .w100 {
        width: 100%;
    }
</style>

<EditForm Model="Content">
    <DataAnnotationsValidator />
    <FluentValidationSummary />

    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextArea Class="w100" @bind-Value="Content.OriginUrl" Placeholder="Origin Url">
        </FluentTextArea>

        <FluentTextField Class="w100" @bind-Value="Content.Note" Placeholder="Note">
        </FluentTextField>

        <div class="row g-1 w100">
            <div class="col">
                <FluentTextField Class="w100" @bind-Value="Content.AkaName" Placeholder="Aka">
                </FluentTextField>
            </div>
            <div class="col">
                <FluentNumberField Class="w100" @bind-Value="Content.TTL" Placeholder="TTL">
                </FluentNumberField>
            </div>
        </div>

        <FluentAutocomplete TOption="Tag" Placeholder="Select tags" Label="Tags"
            OnOptionsSearch="@OnSearchAsync" OptionText="@(i => i.Name)"
            @bind-SelectedOptions="@Content.SelectedTags" />

        <FluentCheckbox @bind-Value=Content.IsEnabled Label="Enabled"></FluentCheckbox>
    </FluentStack>
</EditForm>

@code {
    [Parameter]
    public LinkEditModel Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; }

    public bool IsBusy { get; set; }

    public List<Tag> AllTags { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsBusy = true;

        try
        {
            var apiUrl = $"api/tag/list";
            AllTags = await Http.GetFromJsonAsync<List<Tag>>(apiUrl);
        }
        catch (Exception e)
        {
            await MessageService.ShowMessage($"Error getting data: {e.Message}", MessageIntent.Error);
        }

        IsBusy = false;
    }

    private async Task OnSearchAsync(OptionsSearchEventArgs<Tag> e)
    {
        e.Items = AllTags.Where(i => i.Name.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
        .OrderBy(i => i.Name);

        await Task.CompletedTask;
    }
}